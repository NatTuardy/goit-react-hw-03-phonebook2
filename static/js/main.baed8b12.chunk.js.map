{"version":3,"sources":["components/inputField/InputField.jsx","fields/fields.js","components/contactForm/ContactForm.jsx","components/contactList/contactItem/ContactItem.jsx","components/contactList/ContactList.jsx","components/filter/Filter.jsx","App.js","reportWebVitals.js","index.js"],"names":["InputField","props","data","className","label","htmlFor","id","list","name","type","ariaDescribedby","pattern","title","required","ContactForm","state","number","handleChange","target","value","setState","handleSubmit","e","preventDefault","generate","newContact","onSubmit","this","onChange","class","Component","ContactItem","onDelete","contactsList","map","onClick","ContactList","Filter","filter","App","contacts","handleFilter","item","toLowerCase","includes","findDoubleContact","find","contact","alert","handleDelete","contactsString","localStorage","getItem","contactsParse","JSON","parse","prevProps","prevState","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.baed8b12.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst InputField = (props) => {\r\n    const data = { ...props};\r\n    return (\r\n        <div className=\"mb-3\">\r\n            {data.label && <label htmlFor={data.id} className=\"form-label\">{data.label }</label>}\r\n            <input {...data} />\r\n        </div>        \r\n    )\r\n};\r\n\r\nexport default InputField;\r\n\r\nInputField.propTypes = {\r\n    props: PropTypes.object.isRequired,\r\n  }","export const list = {\r\n    name: {\r\n      name: \"name\",\r\n      type: \"text\",\r\n      className:\"form-control\",\r\n      id:\"inputName\",\r\n      ariaDescribedby:\"nameHelp\",\r\n      pattern: \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\r\n      title: \"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\",\r\n      required: true,\r\n      label: \"Name\",\r\n    },\r\n    number: {\r\n      name: \"number\",\r\n      type: \"tel\",\r\n      className:\"form-control\",\r\n      id: \"inputTelephone\",\r\n      pattern: \"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\",\r\n      title:\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\",\r\n      required: true,\r\n      label: \"Number\"\r\n    },\r\n  };","import { Component } from \"react\";\r\nimport { generate } from \"shortid\";\r\nimport InputField from \"../inputField/InputField\";\r\nimport {list} from \"../../fields/fields\"\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    const { value, name } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    const id = generate();\r\n    const { name, number } = this.state;\r\n    const newContact = { id, name, number };\r\n    this.props.onSubmit(newContact);\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <>\r\n        <form onSubmit={this.handleSubmit} className=\"form-control mb-3\">\r\n          <InputField {...list.name} value={name} onChange={this.handleChange}/>\r\n          <InputField {...list.number} value={number} onChange={this.handleChange}/>\r\n          <div class=\"col-12\">\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n            Add contact\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\nexport default ContactForm;\r\n","import PropTypes from 'prop-types'\r\n\r\nconst ContactItem = ({ data, onDelete }) => {\r\n  const contactsList = data.map(({ name, id, number }) => (\r\n        <li\r\n          key={id}\r\n          className=\"list-group-item d-flex justify-content-between align-items-start \"\r\n        >\r\n          {name}: {number}\r\n          <button\r\n            onClick={() => onDelete(id)}\r\n            type=\"submit\"\r\n            className=\"btn btn-primary align-items-end btn-sm\"\r\n          >\r\n            Delete\r\n          </button>\r\n        </li>\r\n  ));\r\n  return <>{contactsList}</>;\r\n};\r\n\r\nexport default ContactItem;\r\n\r\nContactItem.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    })\r\n  ),\r\n  onDelete: PropTypes.func.isRequired,\r\n}\r\n","import ContactItem from \"./contactItem/ContactItem\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ContactList = ({ data, onDelete }) => {\r\n  return (\r\n    <>\r\n      <h1>Contacts</h1>\r\n      <ul className=\"list-group d-grid gap-2 d-md-flex justify-content-center\">\r\n        <ContactItem data={data} onDelete={onDelete} />\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n\r\nContactList.propTypes = {\r\n  data: PropTypes.array.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n","import PropTypes from 'prop-types'\r\n\r\nconst Filter = ({ onChange, filter }) => {\r\n  return (\r\n    <>\r\n      <h2>Find contacts by name:</h2>\r\n      <div className=\"form-control col-md-6\">\r\n        <input\r\n          className=\"form-control col-md-3\"\r\n          onChange={onChange}\r\n          name=\"filter\"\r\n          value={filter}\r\n          type=\"text\"\r\n        />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n}","import { Component } from \"react\";\nimport \"./App.css\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport Filter from \"./components/filter/Filter\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  componentDidMount() {\n    const contactsString = localStorage.getItem(\"contacts\");\n    const contactsParse = JSON.parse(contactsString);\n    if (contactsParse) {\n      this.setState({ contacts: contactsParse });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  handleFilter = () => {\n    const { filter, contacts } = this.state;\n    const filteredContacts = contacts.filter((item) =>\n      item.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n\n  handleChange = ({ target }) => {\n    const { value, name } = target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (newContact) => {\n    this.setState(({ contacts }) => {\n      const findDoubleContact = contacts.find(\n        (contact) => contact.name === newContact.name\n      );\n      if (findDoubleContact) {\n        alert(`${findDoubleContact.name} is already in contacts`);\n        return;\n      }\n      const newContactsList = [...contacts, newContact];\n      return {\n        contacts: newContactsList,\n        name: \"\",\n        number: \"\",\n      };\n    });\n  };\n\n  handleDelete = (id) => {\n    this.setState(({ contacts }) => {\n      const copyContactsList = [...contacts];\n      const newContactsList = copyContactsList.filter(\n        (contact) => contact.id !== id\n      );\n      return {\n        contacts: newContactsList,\n      };\n    });\n  };\n\n  render() {\n    const { handleChange, handleSubmit, handleFilter, handleDelete } = this;\n    const { contacts, filter } = this.state;\n    return (\n      <div className=\"App\">\n        <h1 className=\"App-header\">Phonebook</h1>\n        <ContactForm onSubmit={handleSubmit} />\n        <Filter onChange={handleChange} data={contacts} filter={filter} />\n        <ContactList data={handleFilter()} onDelete={handleDelete} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}